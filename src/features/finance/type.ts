import { RefObject } from "react";

// Updated types.ts to support end-of-month salary
export type TimeUnit =
	| "yearly"
	| "semiannual"
	| "quarterly"
	| "monthly"
	| "weekly"
	| "daily";

export type ViewMode = "list" | "graph" | "salary" | "estimate";
export type BalanceChangeType = "salary" | "expense" | "manual";

export interface BalanceSectionProps {
	balance?: number; // Total current balance
	expenses?: number; // Total expenses
	remaining?: number; // Optional - you mentioned you might not need this
	simulatedRemaining?: number; // Optional simulated balance
	viewMode?: ViewMode;
}

export interface SummaryItemProps {
	label: string;
	value: string;
}

export interface ExpenseSummaryProps extends BalanceSectionProps {
	onChangeView: (mode: ViewMode) => void;
}

// Updated DatedSalary - remove dayOfMonth since we're using end-of-month
export interface DatedSalary {
	amount: number;
	dayOfMonth: number;
	// dayOfMonth removed - we'll always use last day of month
}

export interface FinanceState {
	salary: DatedSalary | null;
	currentBalance: number;
	manualOverride: boolean;
	groups: string[];
	loaded: boolean;
	lastUpdatedDate?: string;
}

export interface ControlsProps {
	viewMode: ViewMode;
	onChangeView: (mode: ControlsProps["viewMode"]) => void;
}

export interface ExpenseEntry {
	id: string;
	date: string; // ISO date string
	group: string;
	name: string;
	amount: number;
	quantity?: number;
	unit?: string;
	type?: "Dr" | "Cr";
	isAutoGenerated?: boolean;
}

export interface ExpenseTableHandlers {
	handleStartEdit: (expense: ExpenseEntry) => void;
	handleCancelEdit: () => void;
	handleSaveEdit: () => void;
	handleEditChange: (
		field: keyof ExpenseEntry,
		value: string | number
	) => void;
	handleDelete: (id: string, name: string, isAutoGenerated: boolean) => void;
	handleKeyDown: (e: React.KeyboardEvent<HTMLElement>) => void;
	displayQuantity: (
		quantity: number | undefined,
		unit: string | undefined
	) => string;
}

export type TableRowRef = RefObject<HTMLTableRowElement | null>;

export interface SimulatedExpense {
	id: string;
	name: string;
	quantity: number;
	unit: string;
	amount: number;
}

export type DateFilter =
	| "today"
	| "yesterday"
	| "weekly"
	| "monthly"
	| "yearly";

export interface Expense {
	date: string;
	amount: number;
	group: string;
	type?: "Dr" | "Cr";
}
