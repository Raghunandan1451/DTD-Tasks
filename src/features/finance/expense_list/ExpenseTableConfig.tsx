import { ColumnConfig } from "@src/lib/types/table";
import { ExpenseEntry } from "@src/features/finance/type";
import Input from "@src/components/ui/input/Input";
import SimpleSelect from "@src/components/ui/select_dropdown/SimpleSelect";
import ActionButtons from "@src/components/shared/table/ActionButtons";
import { Lock } from "lucide-react";

export const createExpenseColumns = (
	groups: string[]
): ColumnConfig<ExpenseEntry>[] => [
	{
		key: "name",
		label: "Name",
		width: "flex-1", // 35% equivalent
		render: (expense, isEditing, editForm, handlers) => {
			if (isEditing) {
				return (
					<Input
						id={`name-${expense.id}`}
						value={editForm?.name || ""}
						onChange={(e) =>
							handlers.handleEditChange("name", e.target.value)
						}
						className="w-full text-sm"
						onKeyDown={handlers.handleKeyDown}
					/>
				);
			}

			return (
				<div className="flex items-center gap-2">
					{expense.isAutoGenerated && (
						<div title="Auto-generated salary">
							<Lock size={12} className="text-gray-500" />
						</div>
					)}
					<div
						className={`truncate ${
							expense.type === "Cr"
								? "text-green-700 dark:text-green-300 font-medium"
								: "text-gray-800 dark:text-gray-200"
						}`}
						title={expense.name}
					>
						{expense.name}
					</div>
				</div>
			);
		},
	},
	{
		key: "quantity",
		label: "Quantity",
		width: "w-30",
		render: (expense, isEditing, editForm, handlers) => {
			if (isEditing && expense.type !== "Cr") {
				return (
					<div className="flex gap-1">
						<Input
							id={`quantity-${expense.id}`}
							type="number"
							value={editForm?.quantity?.toString() || ""}
							onChange={(e) =>
								handlers.handleEditChange(
									"quantity",
									e.target.value
								)
							}
							className="w-12 text-sm number-input-noappearance"
							onKeyDown={handlers.handleKeyDown}
						/>
						<SimpleSelect
							id={`unit-${expense.id}`}
							value={editForm?.unit || ""}
							onChange={(e) =>
								handlers.handleEditChange(
									"unit",
									e.target.value
								)
							}
							options={["pc(s)", "kg", "lt", "g", "ml"]}
							className="text-xs"
							onKeyDown={handlers.handleKeyDown}
						/>
					</div>
				);
			}

			return (
				<div className="truncate">
					{expense.type === "Cr"
						? "N/A"
						: handlers.displayQuantity?.(
								expense.quantity || 0,
								expense.unit || ""
						  ) || `${expense.quantity || 0} ${expense.unit || ""}`}
				</div>
			);
		},
	},
	{
		key: "amount",
		label: "Amount",
		width: "w-32", // 13% equivalent
		render: (expense, isEditing, editForm, handlers) => {
			if (isEditing) {
				return (
					<Input
						id={`amount-${expense.id}`}
						type="number"
						value={editForm?.amount?.toString() || ""}
						onChange={(e) =>
							handlers.handleEditChange("amount", e.target.value)
						}
						className="w-full text-sm number-input-noappearance"
						step="0.01"
						onKeyDown={handlers.handleKeyDown}
					/>
				);
			}

			return (
				<div
					className={`font-medium ${
						expense.type === "Cr" ? "text-green-700" : ""
					}`}
				>
					{(expense.amount || 0).toFixed(2)}
				</div>
			);
		},
	},
	{
		key: "group",
		label: "Group",
		width: "w-32", // 13% equivalent
		render: (expense, isEditing, editForm, handlers) => {
			if (isEditing) {
				return (
					<SimpleSelect
						id={`group-${expense.id}`}
						value={editForm?.group || ""}
						onChange={(e) =>
							handlers.handleEditChange("group", e.target.value)
						}
						options={groups}
						className="text-sm"
						onKeyDown={handlers.handleKeyDown}
					/>
				);
			}

			return <div className="truncate">{expense.group}</div>;
		},
	},
	{
		key: "type",
		label: "Type",
		width: "w-20", // 7% equivalent
		render: (expense) => (
			<div
				className={`text-xs font-semibold text-center px-2 py-1 rounded-full ${
					expense.type === "Cr"
						? "bg-green-500/20 text-green-700"
						: "bg-red-500/20 text-red-700"
				}`}
			>
				{expense.type || "Dr"}
			</div>
		),
	},
	{
		key: "actions",
		label: "Actions",
		width: "w-24", // 12% equivalent
		render: (expense, isEditing, _editForm, handlers) => (
			<ActionButtons
				isEditing={isEditing}
				isProtected={expense.isAutoGenerated}
				onSave={handlers.handleSaveEdit}
				onCancel={handlers.handleCancelEdit}
				onEdit={() => handlers.handleStartEdit(expense)}
				onDelete={() =>
					handlers.handleDelete(
						expense.id,
						expense.name,
						expense.isAutoGenerated || false
					)
				}
			/>
		),
	},
];
