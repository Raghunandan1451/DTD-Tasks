// src/features/finance/expense_list/ExpenseRow.tsx
import { FC } from "react";
import {
	ExpenseEntry,
	ExpenseTableHandlers,
	TableRowRef,
} from "@src/features/finance/type";
import Input from "@src/components/ui/input/Input";
import SimpleSelect from "@src/components/ui/select_dropdown/SimpleSelect";
import ExpenseRowActions from "@src//features/finance/expense_list/table/ExpenseRowActions";
import { Lock } from "lucide-react";

interface ExpenseRowProps {
	expense: ExpenseEntry;
	groups: string[];
	editingId: string | null;
	editForm: ExpenseEntry | null;
	editRowRef?: TableRowRef;
	handlers: ExpenseTableHandlers;
}

const ExpenseRow: FC<ExpenseRowProps> = ({
	expense,
	groups,
	editingId,
	editForm,
	editRowRef,
	handlers,
}) => {
	const { handleEditChange, handleKeyDown, displayQuantity } = handlers;
	const isEditing = editingId === expense.id;

	return (
		<tr
			ref={isEditing ? editRowRef : null}
			className={`border-b border-white/20 dark:border-white/10 hover:bg-white/10 dark:hover:bg-white/5 transition-all duration-300 ${
				isEditing
					? "bg-blue-500/20 dark:bg-blue-500/15 backdrop-blur-md"
					: expense.type === "Cr"
					? "bg-green-500/10 dark:bg-green-500/5"
					: ""
			}`}
		>
			{/* Name */}
			<td className="px-2 py-1 w-[35%]">
				{isEditing ? (
					<Input
						id={`name-${expense.id}`}
						value={editForm?.name || ""}
						onChange={(e) =>
							handleEditChange("name", e.target.value)
						}
						className="w-full text-sm"
						onKeyDown={handleKeyDown}
					/>
				) : (
					<div className="flex items-center gap-2">
						{expense.isAutoGenerated && (
							<div title="Auto-generated salary">
								<Lock size={12} className="text-gray-500" />
							</div>
						)}
						<div
							className={`truncate ${
								expense.type === "Cr"
									? "text-green-700 dark:text-green-300 font-medium"
									: "text-gray-800 dark:text-gray-200"
							}`}
							title={expense.name}
						>
							{expense.name}
						</div>
					</div>
				)}
			</td>

			{/* Quantity */}
			<td className="px-2 py-1 w-[10%]">
				{isEditing && expense.type !== "Cr" ? (
					<div className="flex gap-1">
						<Input
							id={`quantity-${expense.id}`}
							type="number"
							value={editForm?.quantity || ""}
							onChange={(e) =>
								handleEditChange("quantity", e.target.value)
							}
							className="w-12 text-sm"
							onKeyDown={handleKeyDown}
						/>
						<SimpleSelect
							id={`unit-${expense.id}`}
							value={editForm?.unit || ""}
							onChange={(e) =>
								handleEditChange("unit", e.target.value)
							}
							options={["pc(s)", "kg", "lt", "g", "ml"]}
							className="text-xs"
							onKeyDown={handleKeyDown}
						/>
					</div>
				) : (
					<div className="truncate">
						{expense.type === "Cr"
							? "N/A"
							: displayQuantity(expense.quantity, expense.unit)}
					</div>
				)}
			</td>

			{/* Amount */}
			<td className="px-2 py-1 w-[13%]">
				{isEditing ? (
					<Input
						id={`amount-${expense.id}`}
						type="number"
						value={editForm?.amount || ""}
						onChange={(e) =>
							handleEditChange("amount", e.target.value)
						}
						className="w-full text-sm"
						step="0.01"
						onKeyDown={handleKeyDown}
					/>
				) : (
					<div
						className={`font-medium ${
							expense.type === "Cr" ? "text-green-700" : ""
						}`}
					>
						{expense.amount.toFixed(2)}
					</div>
				)}
			</td>

			{/* Group */}
			<td className="px-2 py-1 w-[13%]">
				{isEditing ? (
					<SimpleSelect
						id={`group-${expense.id}`}
						value={editForm?.group || ""}
						onChange={(e) =>
							handleEditChange("group", e.target.value)
						}
						options={groups}
						className="text-sm"
						onKeyDown={handleKeyDown}
					/>
				) : (
					<div className="truncate">{expense.group}</div>
				)}
			</td>

			{/* Type */}
			<td className="px-2 py-1 w-[7%]">
				<div
					className={`text-xs font-semibold text-center px-2 py-1 rounded-full ${
						expense.type === "Cr"
							? "bg-green-500/20 text-green-700"
							: "bg-red-500/20 text-red-700"
					}`}
				>
					{expense.type || "Dr"}
				</div>
			</td>

			{/* Actions */}
			<td className="px-2 py-1 w-[12%]">
				<ExpenseRowActions
					expense={expense}
					isEditing={isEditing}
					handlers={handlers}
				/>
			</td>
		</tr>
	);
};

export default ExpenseRow;
